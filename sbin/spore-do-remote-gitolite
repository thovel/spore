#!/bin/bash

gitoliteclone=~/gitolite-admin

function usage() {
cat <<-EOF
A spore-do-* commands are used to seed a system with user accounts, ssh
public keys, and other things needed in order for a fresh, clean
system to be accessible to authorized staff.  Typically spore-do-* commands are
invoked as part of the initial set-up scripts, but is also run as a
cron job to ensure that changes to user accounts or public keys are
propagated to the systems.

Synopsis:
  spore-do-* [options] <command> <directory>

<command>: Spore accepts these commands:
  next     shows the next steps that are needed
  apply    ensures that the system conforms to the directory

<directory>: a directory structure as described in
/usr/share/doc/spore/README

Spore does not have any options.
EOF
}


## Logs the arguments to a log file
function log() {
  echo "${@}" | logger -t "$(basename "$0")[$$]"
}

## Get the configuration value of a key $3 from section $2 from a
## ini-file config file $1, printing the default value $4 if it's
## not set.
function get() {
  # first look for any section of the file between a [$2] and a [
  # Within that ({}) look for the "$3 =" with any whitespace interspersed.
  # If you find it, remove everything up to the first "=".
  # "I" is for case insensitive.
  local result=$(sed -n "/^[[:space:]]*\[${2}\]/I,/^\[/ {
            /^[[:space:]]*${3/\//\/}[[:space:]]*=[[:space:]]*/Is/[^=]*=[[:space:]]*//p
          }" "$1" | head -n 1)
  if [ -z "$result" ] ; then
    echo "$4"
  else
    echo "$result"
  fi
}

## Get the configuration value of a key $3 from section $2 from a
## ini-file config file $1, printing the default value $4 if it's
## not set.  Returns all values comma-separated.
function get_multi() {
  # first look for any section of the file between a [$2] and a [
  # Within that ({}) look for the "$3 =" with any whitespace interspersed.
  # If you find it, remove everything up to the first "=".
  # "I" is for case insensitive.
  local result=$(sed -n "/^[[:space:]]*\[$2\]/I,/^\[/ {
            /^[[:space:]]*${3/\//\/}[[:space:]]*=[[:space:]]*/Is/[^=]*=[[:space:]]*//p
          }" "$1" | xargs -L 1 echo -n , )
  if [ -z "$result" ] ; then
    echo "$4"
  else
    echo "${result:2}" # Remove preceding comma and space from first value.
  fi
}


## List the keys of the section $2 from an ini-file config file $1,
function keys() {
  # first look for any section of the file between a [$2] and a [
  # If you find it, remove everything after the first "="
  # "I" is for case insensitive.
  local result=$(sed -n "/^[[:space:]]*\[$2\]/I,/^\[/ {
            /^[[:space:]]*[a-z0-9/@:\.]*[[:space:]]*=[[:space:]]*/Is/[[:space:]]*=.*//p
          }" "$1" | sort | uniq)
  echo "$result"
}


function set_ini_value() {
  if grep -q "^[[:space:]]*\[$2\]" "$1" ; then
    sed -i -e "/^[[:space:]]*\[$2\]/I,/^\[/ {
               /^[[:space:]]*$3[[:space:]]*=[[:space:]]*/Id
               }" \
           -e "/^[[:space:]]*\[$2\]/a$3=$4" "$1"
  else
    cat >> $1 <<- EOF

	[$2]
	$3 = $4
	EOF
  fi
}

## Ensures that the directory $2 exists, and if it isn't
## create it with the specified octal mode $1.
function ensure_dir_exists() {
  local dirname=$2
  if [ ! -d $dirname ] ; then
    echo "mkdir --mode $1 '$dirname'"
    return 1
  fi
}


## Ensures that the permissions $1 are set for a file $2
function ensure_permissions() {
  local perms="$(stat -c %a "$2")"
  if [ "$perms" != "$1" ] ; then
    echo "chmod $1 '$2'"
    return 1
  fi
}


## Ensures that a user $1 owns a file $2
function ensure_user_owns() {
  local owner="$(stat -c %U "$2")"
  if [ "$owner" != "$1" ] ; then
    echo "chown $1: '$2'"
    return 1
  fi
}


## Ensures that a file is present with specific contents
## $1 "where it should be"
## $2 "what it should be"
## $3 "Initial owner, if spore creates it"
## $4 "Initial permissions if spore creates it"
function ensure_file_seeded() {
  if [ ! -f "$1" ] ; then
    if [ -d "$2" ] ; then
      echo "touch '$1'"
    else
      echo "cp '$2' '$1'"
    fi    
    [ ! -z "$3" ] && echo "chown '$3:' '$1'"
    [ ! -z "$4" ] && echo "chmod '$4' '$1'"
    return 1
  fi
}


## Ensures that keys in a keyfile $1 are present for a user's
## authorized_keys file $2.
## If the keyfile contains more than one key, abort
function ensure_key_present() {
  # Algorithm:
  # read each line,
  # if any line is identical to $2, return
  # if end of loop, emit command to add to the file.
  local keyline=$(< "$1")
  if [ -r $2 ] ; then
    while read line ; do
      if [ "$line" == "$keyline" ] ; then
        # We found it!  Nothing to do here
        return
      fi
    done < "$2"
  fi
  # $keyline was not found...
  # TODO: remove apostrophes in output? ugh...
  echo echo \'${keyline}\' '|' tee '>'/dev/null -a \'"$2"\'
  return 1
}

## Ensures that the key in a keyfile $1 are absent (and removed if
## they're found) for a user's authorized_keys file $2.
## If the keyfile contains more than one key, abort
function ensure_key_absent() {
  local key="$(sed < "$1" -n 's/.*\b\(ssh-dss\|ssh-rsa\) \([^ ]*\).*/\2/p')"
  if [ -z "$key" ] ; then
    echo "# unable to parse key file $1 for blacklisting."
    return
  fi
  if [ -r "$2" ] ; then
    if grep > /dev/null $key "$2" ; then
      echo 'sed -i '\''\,'"$key"',d'\' \'$2\'
      return 1
    fi
  fi
}


## Ensures that the gitolite keydir contains the keys
## listed in the ssh-keys directories, but none of the
## keys that have been revoked.
function ensure_gitolite_ssh_keys() {
  local keydir="$1/ssh-keys"
  if [ ! -d "$keydir" ] ; then
    echo "# ignoring $user_name's keys, since keydir $keydir is missing."
    return 0
  fi

  local escaped_keydir=$(echo $keydir | sed 's/\//\\\//g')
  local user_name=$2
  local key
  for key in "$keydir/"*.pub ; do

    local keyname=$(echo $key | sed "s/${escaped_keydir}\/\(.*\)\.pub$/\1/g")
    local keysubdir="${user_name}-$keyname"
    

    if [ -r "$key" ] ; then
      ensure_dir_exists "0755" "$gitoliteclone/keydir/${keysubdir}"
      ensure_key_present $key $gitoliteclone/keydir/${keysubdir}/${user_name}.pub || return 1
    fi

    
  done    

  for key in "$keydir/"*.blacklisted ; do

    local keyname=$(echo $key | sed "s/${escaped_keydir}\/\(.*\)\.blacklisted$/\1/g")
    local keysubdir="${user_name}-$keyname"

    if [ -r "$key" ] ; then
      ensure_key_absent $key $gitoliteclone/keydir/${keysubdir}/${user_name}.pub || return 1
    fi
  done

  # TODO: ensure that no other keys are present (by counting them?)
  # e.g.
  # wc -l authorized_keys; ls -1 keydir/*.pub | wc -l
}



## Ensures that the .ssh/authorized_keys has the keys
## listed in the ssh-keys directories, but none of the
## keys that have been revoked.
function ensure_ssh_keys() {
  local keydir="$1/ssh-keys"
  if [ ! -d "$keydir" ] ; then
    echo "# ignoring $user_name's keys, since keydir $keydir is missing."
    return 0
  fi
  sshdir=$(eval echo ~"$user_name"/.ssh)
  ensure_dir_exists 700 $sshdir || return 1
  ensure_user_owns $user_name $sshdir || return 1
  ensure_permissions 700 $sshdir || return 1
  local key
  for key in "$keydir/"*.pub ; do
    if [ -r "$key" ] ; then
      ensure_key_present $key $sshdir/authorized_keys || return 1
    fi
  done
  for key in "$keydir/"*.blacklisted ; do
    if [ -r "$key" ] ; then
      ensure_key_absent $key $sshdir/authorized_keys || return 1
    fi
  done
  if [ -r $sshdir/authorized_keys ] ; then
    ensure_user_owns $user_name $sshdir/authorized_keys || return 1
    ensure_permissions 600 $sshdir/authorized_keys || return 1
  fi
  # TODO: ensure that no other keys are present (by counting them?)
  # e.g.
  # wc -l authorized_keys; ls -1 keydir/*.pub | wc -l
}

## Ensures that the dotfiles in each user's "dotfiles" directory are
## propagated as ".xxx" files owned by the user.  No files can be
## revoked
function ensure_dot_files() {
  local dotfilesdir="$1/dotfiles"
  if [ ! -d "$dotfilesdir" ] ; then
    return 0
  fi
  local dotfile
  local homedir=$(eval echo ~"$user_name")
  for dotfile in "$dotfilesdir/"* ; do
    if [ -r "$dotfile" ] && [ -f "$dotfile" ] ; then
      dotfilename=$(basename "$dotfile");
      ensure_file_seeded $homedir/.${dotfilename} $dotfile ${user_name} 600 || return 1
    fi
  done
}

function ensure_group_membership(){ 

  local group=$1
  local spore_name=$2
  local user_name=$3

  ensure_dir_exists "0755" "${gitoliteclone}/conf/groups"
  
  local spore_named_group="${spore_name}-${group}"
  if [ ! -f "${gitoliteclone}/conf/groups/${spore_named_group}.group" ] ; then
    echo "echo -n \"@${spore_named_group} = ${user_name}\" > ${gitoliteclone}/conf/groups/${spore_named_group}.group"
  else
    grep -q "${user_name}" "${gitoliteclone}/conf/groups/${spore_named_group}.group"
    if [ 0 -ne $? ] ; then
      echo "echo -n \" $user_name\" >> ${gitoliteclone}/conf/groups/${spore_named_group}.group"
    fi
  fi
  return;
  
}


function ensure_policy_user() {
  local spore_name=$2
  local person="$1/person.ini"
  if [ ! -r "$person" ] ; then
    echo "# $person does not have a person definition."
    return;
  fi
  user_name=$(get "$person" user name)
  if [ -z "$user_name" ] ; then
    echo "# $person does not have a user_name; ignoring."
    return;
  fi
  email=$(get "$person" user email)
  if [ -z "$email" ] ; then
    echo "# $person does not have an email address; ignoring."
    return;
  else
    email_lowercase=$(echo $email | tr 'A-Z' 'a-z')
  fi
  user_full=$(get "$person" name full)

# old: add posix user
#  user_shell=$(get "$person" user shell "/bin/bash")
#  if ! getent passwd $user_name >/dev/null; then
#    echo "useradd --create-home  --comment '$user_full' --shell '$user_shell' '$user_name'"
#    return
#  fi

# new: add gitolite key file with the user name"
#  To add a user, say Alice, obtain her public key (typically $HOME/.ssh/id_rsa.pub on her workstation),
#  copy it to keydir with the user name as the basename (e.g., 'alice.pub' for user alice), then git add
#  keydir/alice.pub. (All keys files must have names ending in ".pub", and must be in openssh's
#  default format).





  
  user_groups=$(get "$person" user groups)
  local group;
  for group in $user_groups ; do
    # ensure group that the user is added to the group and the group exists
    script=$(ensure_group_membership $group $spore_name $email_lowercase)
    if [ ! -z "$script" ] ; then
      echo "$script"
      break
    fi
  done

  ensure_gitolite_ssh_keys $1 $email_lowercase
}

function ensure_policy() {
  local spore_name=$2
  local dir
  for dir in "$1/users/"* ; do
    if [ -d "$dir" ] ; then
      script=$(ensure_policy_user "$dir" "$spore_name")
      if [ ! -z "$script" ] ; then
        echo "$script"
        
      fi      
    else
      echo "# ignoring non-directory $dir"
    fi
  done
}


function iterate_over_spores() {

  # TODO: configurable number of iterations to allow
  local max_policies=1000
  local counter=0
  local oldscript=""
  while [[ $counter -lt $max_policies ]]
  do
    script="$(ensure_policy "$1" "$2")"
    if [ -z "$script" ] ; then
      break;
    fi
    if [ "${oldscript}" == "${script}" ] ; then
      break;
    fi
    eval "${script}"
    local rc=$?
    [ $rc != 0 ] && local suffix=" (rc=$rc)"
    log "$script$suffix"
    oldscript="${script}"
    counter=$((counter + 1))
  done
  if [ ! -z "${script}" ] ; then
    echo "${script}"
  fi
  echo "Complete ($counter commands run)."
}


function main() {
  local command=$1
  local spores=$2
  local spore_state_directory=$3
  local spore_name=$4
  echo "# directory with spores: $spores"
  local spore_name=$3
  if [ "$command" == "" ] ; then
    usage
    return 0
  fi
  if [[ -z "$spores" || ! -d "$spores" ]] ; then
    echo "You must specify an existing directory to work with."
    return 2
  fi
  if [[ -z "$spore_name" || ! $spore_name =~ ^[a-z]{2,20}$ ]] ; then
    echo "You must specify a spore name that adheres to [a-z]{2,20}"
    return 2
  fi
  if [ "$command" == "next" ] ; then
    ensure_policy "$spores" "$spore_name"
  elif [ "$command" == "apply" ] ; then
    iterate_over_spores "$spores" "$spore_name"
  else
    echo "Unknown command $2"
  fi
}


main "${@}"

