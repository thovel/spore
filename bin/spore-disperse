#!/bin/bash

function usage() {
cat <<-EOF
The spore-disperse command is used to create a subset of a set of
spores to make it suitable to apply the spores to a system.  It takes
a set of spores as input, alongside a configuration data, to create
a new set of spores.

Synopsis:
  spore-disperse <directory> <auth.ini> <environment> <output-directory>

where <auth.ini> is a file containing the roles and permissions you
would like to apply.  The output-directory will be created if it
doesn't exist, and will be populated with select spores from the
<directory>, possibly with additional information, like additional
groups that users might have access to in the given <environment>.
EOF
}


## Get the configuration value of a key $3 from section $2 from a
## ini-file config file $1, printing the default value $4 if it's
## not set.
function get() {
  # first look for any section of the file between a [$2] and a [
  # Within that ({}) look for the "$3 =" with any whitespace interspersed.
  # If you find it, remove everything up to the first "=".
  # "I" is for case insensitive.
  local result=$(sed -n "/^[[:space:]]*\[${2}\]/I,/^\[/ {
            /^[[:space:]]*${3/\//\/}[[:space:]]*=[[:space:]]*/Is/[^=]*=[[:space:]]*//p
          }" "$1" | head -n 1)
  if [ -z "$result" ] ; then
    echo "$4"
  else
    echo "$result"
  fi
}

## Get the configuration value of a key $3 from section $2 from a
## ini-file config file $1, printing the default value $4 if it's
## not set.  Returns all values comma-separated.
function get_multi() {
  # first look for any section of the file between a [$2] and a [
  # Within that ({}) look for the "$3 =" with any whitespace interspersed.
  # If you find it, remove everything up to the first "=".
  # "I" is for case insensitive.
  local result=$(sed -n "/^[[:space:]]*\[$2\]/I,/^\[/ {
            /^[[:space:]]*${3/\//\/}[[:space:]]*=[[:space:]]*/Is/[^=]*=[[:space:]]*//p
          }" "$1" | xargs -L 1 echo -n , )
  if [ -z "$result" ] ; then
    echo "$4"
  else
    echo "${result:2}" # Remove preceding comma and space from first value.
  fi
}


## List the keys of the section $2 from an ini-file config file $1,
function keys() {
  # first look for any section of the file between a [$2] and a [
  # If you find it, remove everything after the first "="
  # "I" is for case insensitive.
  local result=$(sed -n "/^[[:space:]]*\[$2\]/I,/^\[/ {
            /^[[:space:]]*[a-z0-9/@:\.]*[[:space:]]*=[[:space:]]*/Is/[[:space:]]*=.*//p
          }" "$1" | sort | uniq)
  echo "$result"
}


function set_ini_value() {
  local sfx=.$$.bak
  if grep -q "^[[:space:]]*\[$2\]" "$1" ; then
    sed -i$sfx \
           -e "/^[[:space:]]*\[$2\]/I,/^\[/ {
               /^[[:space:]]*$3[[:space:]]*=[[:space:]]*/Id
               }" \
           -e "/^[[:space:]]*\[$2\]/a$3=$4" "$1"
  else
    cp -p "$1" "$1$sfx"
    cat >> $1 <<- EOF

	[$2]
	$3 = $4
	EOF
  fi
  touch --reference "$1$sfx" "$1"
  rm -f "$1$sfx"
}


# Return a list of roles the user has
function do_auth_get_roles_of_user() {
  get_multi $1 users $2 | sed s/,/' '/g
}

# Return the permissions a role implies for a particular environment
function do_auth_get_permissions_of_role() {
  local allperms
  allperms=$(get_multi $1 permissions $3)
  # Read comma separated variable into an array
  IFS=',' read -ra allpermsarr <<< "$allperms"
  for perm in "${allpermsarr[@]}" ; do
    if egrep -q ' (in|on|to) '"$2"$ <<< $perm  ; then
      echo $perm | sed -E -e s/' (in|on|to) '"$2"$// -e s/' '+/_/g
    fi
  done
}

## Called only when the user actually has ssh permissions.
## exmaple:
##   /dir     /foo.ini  production    /tmp/output  some/identi@fier
##   1        2         3             4            5
##   <spores> <inifile> <environment> <output-dir> <person-identifier>

function do_auth_process_ssh_permission() {
  [ ! -d $1/$5 ] && return 1
  targetname=${5/\//-}
  mkdir -p "$4/users/$targetname"
  cp -rp "$1/$5/"* "$4/users/$targetname/"
}

function do_auth_process_group_permission() {
  targetname=${5/\//-}
  [ ! -r $4/users/$targetname/person.ini ] && return 0
  groups=$(get "$4/users/$targetname/person.ini" user groups )
  if ! grep -q '\b'$6'\b' <<<$groups ; then
    groups="$6 ${groups}"
    set_ini_value $4/users/$targetname/person.ini user groups "$groups"
  fi
}


## Apply the authorization and authentication for a single user
## Get all the roles that the user has
## translate the roles to a list of permissions
## implement the permissions
function do_auth_user() {
  local roles="$(do_auth_get_roles_of_user "$2" "$5")"
  local role
  local permissions=$(
  for role in $roles ; do
    do_auth_get_permissions_of_role "$2" "$3" "$role"
  done | sort | uniq
  )
  for word in ssh group_ ; do
    if grep -q '\b'$word'\b' <<< $permissions ; then
      do_auth_process_${word}_permission "${@}" || return 1
    elif grep -q '\b'$word <<< $permissions ; then
      # extract words after relevant $word from permissions, and use that.
      local permission
      for permission in $permissions ; do
        if [[ $permission == ${word}* ]] ; then
          # we found it, remove preceding ${word}
          permission=${permission/${word}/}
          do_auth_process_${word}permission "${@}" $permission || return 1
        fi
      done
    fi
  done
}

## Apply the authorization and authentication
##
## Example: spore-disperse /etc/spores/ test.ini production /tmp/my-applied/spores
## Input $1 a directory of spores
## Input $2 an ini-file containing
## Input $3 an environment (e.g. test, production, staging)
## Output $4 an output directory for spores which will be created/amended.
##
## Ini file format
## [permissions]
## role1 = permission
## role2 = permission
## [users]
## vizrt/erm = role1, role2
##
## permission is one of:
##  - ssh to <environment>
function do_auth() {
  local inifile="$2"
  if [ ! -r "$inifile" ] ; then
    echo "Please specify a readable ini file."
    return 1;
  fi
  
  local user
  for user in $(keys "$inifile" users) ; do
    do_auth_user "${@}" $user
  done
}


function main() {
  local spores=$1
  if [ "$#" != "4" ] ; then
    usage
    return 0
  fi
  if [[ -z "$spores" || ! -d "$spores" ]] ; then
    echo "You must specify an existing directory to work with."
    return 2
  fi
  do_auth "${@}"
}


main "${@}"

