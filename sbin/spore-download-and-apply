#!/bin/bash

## Logs the arguments to syslog
function log() {
  logger -t "$(basename "$0")[$$]" -- "${@}"
}


if [ ! -r /etc/spore-cronjob.conf ] ; then
  cat <<- 'EOF'
	I need an /etc/spore-cronjob.conf to run. For example

	  # The URI of a .tar.gz file containing spores
	  spore_uri=http://some/ur/of/a/spore.tar.gz

          # The URI of the signature, defaults to "$spore_uri.asc"
	  # spore_signature_uri=http://some/ur/of/a/spore.asc

	  # If the spore or signature are protected by password, specify them here
	  http_user=someuser
	  http_passwd=somepasswd

	  # GPG ID of the trusted signatures;
	  spore_signee=123456

	The file will be sourced from bash.
	EOF
  exit 2
fi

function usage() {
cat <<EOF
	Usage: $0: [-a] [-c] [-d] [-v]
	  -a : apply spores
	  -c : Check consistency of current state.
	  -d : download spores if they have changed
	  -v : verify signature of spores

	By default, spores are downloaded and applied; if any options are
	specified, only those options will be used.

	The operations always run in this order:
	  1. verify existing spores  (-v)
	  2. consistency check       (-c)
	  3. download new spores     (-d)
	  4. verify new spores       (-v)
	  5. apply new spores        (-a)

	$0 is designed to be run as a cron job; as often as you feel it's
	necessary; either in hourly or daily, or maybe every few minutes.

	The "normal" state is that the spores have been downloaded and have
	been applied cleanly; in this state, the command will by default
	check consistency and do a conditional download of the spores; an
	operation that usually takes well less than a second of CPU time.

	Example crontab:

	  7-57/10 * * * * /usr/sbin/spore-download-and-apply

EOF
}


source /etc/spore-cronjob.conf

check_consistency_of_spores=0
apply_spores=0
download_spores=0
verify_spores=0
default_operation=1

while [ $# -gt 0 ] ; do
  if [ "$1" == "-a" ] ; then
    apply_spores=1
    default_operation=0
    shift;
    continue;
  fi
  if [ "$1" == "-d" ] ; then
    download_spores=1
    default_operation=0
    shift;
    continue;
  fi
  if [ "$1" == "-c" ] ; then
    check_consistency_of_spores=1
    default_operation=0
    shift;
    continue;
  fi
  if [ "$1" == "-v" ] ; then
    verify_spores=1
    default_operation=0
    shift;
    continue;
  fi
  echo "unknown argument " "${@}"
  usage
  exit 2
done

if [ $default_operation -eq 1 ] ; then
  check_consistency_of_spores=1
  apply_spores=1
  download_spores=1
  verify_spores=1
fi

curl_opts="$curl_opts -s"

if [ -z "$spore_uri" ] ; then
  echo "spore_uri mandatory, not set."
  exit 2
fi

if [ ! -z "$http_user" ] && [ ! -z "$http_passwd" ] ; then
  curl_opts="$curl_opts --user $http_user:$http_passwd"
elif [ ! -z "$http_user" ] ; then
  curl_opts="$curl_opts --user $http_user"
fi

if [ -z "$spore_signature_uri" ] ; then
  spore_signature_uri="$spore_uri.asc"
fi

# Conditionally download $1 to $2 using $3 as metadata.
function conditional_get() {
  if [ -r "$3" ] ; then
    local metadata=$(cat "$3")
  fi
  shopt -s nocasematch
  shopt -s nocaseglob
  if [[ $metadata == etag:* ]] ; then
    local conditional=( "--header" "If-None-Match: $(echo ${metadata} | sed s/^etag://i )" )
  elif [[ $metadata == last-modified* ]] ; then
    local conditional=( "--header" "If-Modified-Since: $(echo "${metadata}" | sed s/^last-modified://i)" )
  fi
  local tmpfile=$(mktemp)
  local tmpmeta=$(mktemp)
  curl "${conditional[@]}" $curl_opts $1 --dump-header $tmpmeta > $tmpfile
  sed -i s/'\r'// $tmpmeta

  read httpver responsestatus responsetext <<< $(grep ^HTTP/ $tmpmeta | tail -n 1)
  if [ "$responsestatus" != "200" ] ; then
    rm $tmpfile $tmpmeta
    return 1
  fi

  if [ ! -s $tmpfile ] ; then
    echo "unable to download $1; empty"
    rm $tmpfile $tmpmeta
    return 1
  fi

  mv "${tmpfile}" "${2}"

  local meta=$( grep -i "^ETag:" "$tmpmeta" | head -n 1 )
  if [ -z "$meta" ] ; then
    meta=$( grep -i "^last-modified:" "$tmpmeta" | head -n 1 )
  fi
  if [ ! -z "$meta" ] ; then
    echo "$meta" > $3
  fi
  rm $tmpmeta
}


function do_download_spores() {
  if [ $download_spores -eq 0 ] ; then
    return 0
  fi
  download_skipped=1
  if conditional_get $spore_uri /var/lib/spore.tar.gz /var/lib/spore.metadata ; then 
    download_skipped=0
    log "New spores downloaded from $spore_uri to /var/lib/spore.tar.gz"
  fi
  if conditional_get $spore_signature_uri /var/lib/spore.tar.gz.asc /var/lib/spore.asc.metadata ; then
    download_skipped=0
  fi
  return $download_skipped
}


function do_verify_spores() {
  if [ $verify_spores -eq 0 ] ; then
    return
  fi

  if [ ! -r /var/lib/spore.tar.gz ] ; then
    # spores don't exist yet, nothing to verify, nothing to find "invalid"
    return 0
  fi

  gpg_status=$(mktemp)

  gpg 2> /dev/null --status-fd 1 $gpg_opts --verify /var/lib/spore.tar.gz.asc > $gpg_status
  local rc=$PIPESTATUS
  if [ $rc != 0 ] ; then
    log "gpg failed (rc $rc) to verify signature, $spore_signature_uri maybe tampered with."
    rm $gpg_status
    return 1
  fi

  if ! grep -q "GOODSIG.*$spore_signee" $gpg_status ; then
    log "Signature did not match requested signees.  $(grep GOODSIGN $gpg_status)."
    rm $gpg_status
    return 1
  fi

  log "Good signature from $spore_signee in /var/lib/spore.tar.gz.asc"
  rm $gpg_status
}


function do_apply_spores() {
  if [ $apply_spores -eq 0 ] ; then
    return
  fi
  tmpdir=$(mktemp -d)
  log "Applying spores"
  cd $tmpdir && tar xzf /var/lib/spore.tar.gz && spore apply . && cd && rm -rf $tmpdir
}

function do_check_consistency_of_spores() {
  if [ $check_consistency_of_spores -eq 0 ] ; then
    return
  fi
  if [ ! -r /var/lib/spore.tar.gz ] ; then
    # No spores downloaded yet, skipping consistency check.
    return
  fi

  tmpdir=$(mktemp -d)
  cd $tmpdir
  tar xzf /var/lib/spore.tar.gz
  lines=$(spore next . | grep -v ^# | wc -l)
  cd
  rm -rf $tmpdir
  if [ $lines -ne 0 ] ; then
    log "Internal consistency check failed; old spores don't match current state."
    return 1
  fi
  return
}


do_verify_spores &&
do_check_consistency_of_spores &&
do_download_spores &&
do_verify_spores &&
do_apply_spores

